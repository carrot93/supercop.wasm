// Generated by LiveScript 1.5.0
/**
 * @package   supercop.wasm
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2017, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var browserify, del, exec, fs, glob, gulp, rename, tap, uglify, DESTINATION;
  browserify = require('browserify');
  del = require('del');
  exec = require('child_process').exec;
  fs = require('fs');
  glob = require('glob');
  gulp = require('gulp');
  rename = require('gulp-rename');
  tap = require('gulp-tap');
  uglify = require('gulp-uglify');
  DESTINATION = 'dist';
  gulp.task('build', ['clean', 'wasm', 'browserify', 'minify'], function(){
    gulp.src('supercop.wasm').pipe(gulp.dest(DESTINATION));
  }).task('wasm', function(callback){
    var files, optimize, command;
    files = glob.sync('vendor/src/*.c').join(' ');
    optimize = "-O2 --closure 1 -s NO_EXIT_RUNTIME=1 -s NO_FILESYSTEM=1 -s EXPORTED_RUNTIME_METHODS=[] -s DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=[]";
    command = "emcc supercop.c " + files + " -o supercop.js -s MODULARIZE=1 -s WASM=1 " + optimize;
    exec(command, function(error, stdout, stderr){
      if (stdout) {
        console.log(stdout);
      }
      if (stderr) {
        console.error(stderr);
      }
      callback(error);
    });
  }).task('browserify', ['clean', 'wasm'], function(){
    return gulp.src('index.js', {
      read: false
    }).pipe(tap(function(file){
      file.contents = browserify({
        entries: file.path,
        standalone: 'supercop_wasm',
        builtins: [],
        detectGlobals: false
      }).bundle();
    })).pipe(rename({
      basename: 'supercop.wasm.browser'
    })).pipe(gulp.dest(DESTINATION));
  }).task('clean', function(){
    return del(DESTINATION);
  }).task('minify', ['browserify'], function(){
    return gulp.src(DESTINATION + "/*.js").pipe(uglify()).pipe(rename({
      suffix: '.min'
    })).pipe(gulp.dest(DESTINATION));
  });
}).call(this);
